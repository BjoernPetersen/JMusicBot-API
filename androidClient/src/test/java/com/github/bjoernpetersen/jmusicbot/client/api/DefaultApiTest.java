/*
 * JMusicBot
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.5.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.github.bjoernpetersen.jmusicbot.client.api;

import com.github.bjoernpetersen.jmusicbot.client.ApiException;
import com.github.bjoernpetersen.jmusicbot.client.model.PlayerState;
import com.github.bjoernpetersen.jmusicbot.client.model.QueueEntry;
import com.github.bjoernpetersen.jmusicbot.client.model.Song;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Ignore
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    
    /**
     * Sets a new password
     *
     * Sets a new password for the caller. If the user was a guest account, this makes him a full user.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void changePasswordTest() throws ApiException {
        String authorization = null;
        String password = null;
        String oldPassword = null;
        String response = api.changePassword(authorization, password, oldPassword);

        // TODO: test validations
    }
    
    /**
     * Deletes a user
     *
     * Deletes the user associated with the Authorization token.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteUserTest() throws ApiException {
        String authorization = null;
        api.deleteUser(authorization);

        // TODO: test validations
    }
    
    /**
     * Removes a Song from the queue
     *
     * Removes the specified Song from the current queue. If the queue did not contain the song, nothing is done.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void dequeueTest() throws ApiException {
        String authorization = null;
        QueueEntry queueEntry = null;
        List<QueueEntry> response = api.dequeue(authorization, queueEntry);

        // TODO: test validations
    }
    
    /**
     * Adds a Song to the queue
     *
     * Adds the specified Song to the current queue. If the queue already contains the Song, it won&#39;t be added.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void enqueueTest() throws ApiException {
        String authorization = null;
        String songId = null;
        String providerId = null;
        List<QueueEntry> response = api.enqueue(authorization, songId, providerId);

        // TODO: test validations
    }
    
    /**
     * Returns the current player state
     *
     * Returns the current player state. If the state is PLAY or PAUSE, it also contains the current song.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPlayerStateTest() throws ApiException {
        PlayerState response = api.getPlayerState();

        // TODO: test validations
    }
    
    /**
     * Returns a list of all available providers
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getProvidersTest() throws ApiException {
        List<String> response = api.getProviders();

        // TODO: test validations
    }
    
    /**
     * Returns the current player queue
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getQueueTest() throws ApiException {
        List<QueueEntry> response = api.getQueue();

        // TODO: test validations
    }
    
    /**
     * Returns a list of all available suggesters
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSuggestersTest() throws ApiException {
        List<String> response = api.getSuggesters();

        // TODO: test validations
    }
    
    /**
     * Retrieves a token for a user
     *
     * Retrieves an Authorization token for a user. Either a password or a UUID must be supplied. Not both.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void loginTest() throws ApiException {
        String userName = null;
        String password = null;
        String uuid = null;
        String response = api.login(userName, password, uuid);

        // TODO: test validations
    }
    
    /**
     * Looks up a song
     *
     * Looks up a song using its ID and a provider ID
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void lookupSongTest() throws ApiException {
        String songId = null;
        String providerId = null;
        Song response = api.lookupSong(songId, providerId);

        // TODO: test validations
    }
    
    /**
     * Skips to the next song
     *
     * Skips the current song and plays the next song.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void nextSongTest() throws ApiException {
        String authorization = null;
        PlayerState response = api.nextSong(authorization);

        // TODO: test validations
    }
    
    /**
     * Pauses the player
     *
     * Pauses the current playback. If the current player state is not PLAY, does nothing.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void pausePlayerTest() throws ApiException {
        PlayerState response = api.pausePlayer();

        // TODO: test validations
    }
    
    /**
     * Registers a new user
     *
     * Adds a new guest user to the database. The user is identified by his username.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void registerUserTest() throws ApiException {
        String userName = null;
        String uuid = null;
        String response = api.registerUser(userName, uuid);

        // TODO: test validations
    }
    
    /**
     * Removes a song from the suggestions
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void removeSuggestionTest() throws ApiException {
        String suggesterId = null;
        String authorization = null;
        String songId = null;
        String providerId = null;
        api.removeSuggestion(suggesterId, authorization, songId, providerId);

        // TODO: test validations
    }
    
    /**
     * Resumes the player
     *
     * Pauses the current playback. If the current player state is not PAUSE, does nothing.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void resumePlayerTest() throws ApiException {
        PlayerState response = api.resumePlayer();

        // TODO: test validations
    }
    
    /**
     * Searches for songs
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void searchSongTest() throws ApiException {
        String providerId = null;
        String query = null;
        List<Song> response = api.searchSong(providerId, query);

        // TODO: test validations
    }
    
    /**
     * Returns a list of suggestions
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void suggestSongTest() throws ApiException {
        String suggesterId = null;
        Integer max = null;
        List<Song> response = api.suggestSong(suggesterId, max);

        // TODO: test validations
    }
    
}
